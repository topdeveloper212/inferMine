diff -wbBdu -Nru a/llvm/bindings/ocaml/llvm/llvm.ml b/llvm/bindings/ocaml/llvm/llvm.ml
--- a/llvm/bindings/ocaml/llvm/llvm.ml	2025-04-11 06:57:47.931800281 -0700
+++ b/llvm/bindings/ocaml/llvm/llvm.ml	2025-04-11 07:42:51.657447142 -0700
@@ -602,6 +602,10 @@
 external value_as_metadata : llvalue -> llmetadata = "llvm_value_as_metadata"
 external metadata_as_value : llcontext -> llmetadata -> llvalue
                         = "llvm_metadata_as_value"
+external get_debug_loc_directory : llvalue -> string option = "llvm_get_debug_loc_directory"
+external get_debug_loc_filename : llvalue -> string option = "llvm_get_debug_loc_filename"
+external get_debug_loc_line : llvalue -> int = "llvm_get_debug_loc_line"
+external get_debug_loc_column : llvalue -> int = "llvm_get_debug_loc_column"
 
 (*--... Operations on scalar constants .....................................--*)
 external const_int : lltype -> int -> llvalue = "llvm_const_int"
diff -wbBdu -Nru a/llvm/bindings/ocaml/llvm/llvm.mli b/llvm/bindings/ocaml/llvm/llvm.mli
--- a/llvm/bindings/ocaml/llvm/llvm.mli	2025-04-11 06:57:47.931800281 -0700
+++ b/llvm/bindings/ocaml/llvm/llvm.mli	2025-04-11 07:42:51.660447162 -0700
@@ -962,6 +962,33 @@
     See the method [llvm::MetadataAsValue::get()]. *)
 val metadata_as_value : llcontext -> llmetadata -> llvalue
 
+(** [get_debug_loc_directory v] returns the directory of the debug location
+    for [v], which must be an [Instruction], [GlobalVariable], or [Function].
+    See the [llvm::Instruction::getDebugLoc()],
+    [llvm::GlobalVariable::getDebugInfo()], and
+    [llvm::Function::getSubprogram()] methods. *)
+val get_debug_loc_directory : llvalue -> string option
+
+(** [get_debug_loc_filename v] returns the filename of the debug location
+    for [v], which must be an [Instruction], [GlobalVariable], or [Function].
+    See the [llvm::Instruction::getDebugLoc()],
+    [llvm::GlobalVariable::getDebugInfo()], and
+    [llvm::Function::getSubprogram()] methods. *)
+val get_debug_loc_filename : llvalue -> string option
+
+(** [get_debug_loc_line v] returns the line number of the debug location
+    for [v], which must be an [Instruction], [GlobalVariable], or [Function].
+    See the [llvm::Instruction::getDebugLoc()],
+    [llvm::GlobalVariable::getDebugInfo()], and
+    [llvm::Function::getSubprogram()] methods. *)
+val get_debug_loc_line : llvalue -> int
+
+(** [get_debug_loc_column v] returns the column number of the debug location
+    for [v], which must be an [Instruction].
+    See the [llvm::Instruction::getDebugLoc()] method. *)
+val get_debug_loc_column : llvalue -> int
+
+
 (** {7 Operations on scalar constants} *)
 
 (** [const_int ty i] returns the integer constant of type [ty] and value [i].
diff -wbBdu -Nru a/llvm/bindings/ocaml/llvm/llvm_ocaml.c b/llvm/bindings/ocaml/llvm/llvm_ocaml.c
--- a/llvm/bindings/ocaml/llvm/llvm_ocaml.c	2025-04-11 06:57:47.931800281 -0700
+++ b/llvm/bindings/ocaml/llvm/llvm_ocaml.c	2025-04-11 07:42:51.660447162 -0700
@@ -19,6 +19,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include "llvm-c/Core.h"
+#include "llvm-c/DebugInfo.h"
 #include "llvm-c/Support.h"
 #include "llvm/Config/llvm-config.h"
 #include "caml/memory.h"
@@ -988,6 +989,116 @@
   return to_val(LLVMMetadataAsValue(Context_val(C), Metadata_val(MD)));
 }
 
+/* Get the DIVariable associated with a GlobalVariable */
+LLVMMetadataRef global_variable_get_divariable(LLVMValueRef GV) {
+  LLVMMetadataRef Var = NULL;
+  size_t NumEntries;
+  LLVMValueMetadataEntry *Entries = LLVMGlobalCopyAllMetadata(GV, &NumEntries);
+  unsigned dbg = LLVMGetMDKindID("dbg", 3);
+  for (int i = 0; i < NumEntries; i++) {
+    if (LLVMValueMetadataEntriesGetKind(Entries, i) == dbg) {
+      LLVMMetadataRef GVE = LLVMValueMetadataEntriesGetMetadata(Entries, i);
+      if (GVE) {
+        Var = LLVMDIGlobalVariableExpressionGetVariable(GVE);
+        break;
+      }
+    }
+  }
+  LLVMDisposeValueMetadataEntries(Entries);
+  return Var;
+}
+
+/* Get the DIFile associated with an Instruction, GlobalVariable, or Function */
+LLVMMetadataRef get_debug_file(LLVMValueRef Val) {
+  LLVMMetadataRef F = NULL;
+  if (LLVMIsAInstruction(Val)) {
+    LLVMMetadataRef Loc = LLVMInstructionGetDebugLoc(Val);
+    if (Loc) {
+      LLVMMetadataRef Scope = LLVMDILocationGetScope(Loc);
+      if (Scope) {
+        F = LLVMDIScopeGetFile(Scope);
+      }
+    }
+  } else if (LLVMIsAGlobalVariable(Val)) {
+    LLVMMetadataRef Var = global_variable_get_divariable(Val);
+    if (Var) {
+      F = LLVMDIVariableGetFile(Var);
+    }
+  } else if (LLVMIsAFunction(Val)) {
+    LLVMMetadataRef Subprogram = LLVMGetSubprogram(Val);
+    if (Subprogram) {
+      F = LLVMDIScopeGetFile(Subprogram);
+    }
+  }
+  return F;
+}
+
+/* llvalue -> string option */
+CAMLprim value llvm_get_debug_loc_directory(value v) {
+  LLVMValueRef Val = Value_val(v);
+  CAMLparam0();
+  CAMLlocal1(Option);
+  unsigned Length = 0;
+  const char *Chars = NULL;
+  LLVMMetadataRef File = get_debug_file(Val);
+  if (File) {
+    Chars = LLVMDIFileGetDirectory(File, &Length);
+  };
+  Option = cstr_to_string_option(Chars, Length);
+  CAMLreturn(Option);
+}
+
+/* llvalue -> string option */
+CAMLprim value llvm_get_debug_loc_filename(value v) {
+  LLVMValueRef Val = Value_val(v);
+  CAMLparam0();
+  CAMLlocal1(Option);
+  unsigned Length = 0;
+  const char *Chars = NULL;
+  LLVMMetadataRef File = get_debug_file(Val);
+  if (File) {
+    Chars = LLVMDIFileGetFilename(File, &Length);
+  };
+  Option = cstr_to_string_option(Chars, Length);
+  CAMLreturn(Option);
+}
+
+/* llvalue -> int */
+CAMLprim value llvm_get_debug_loc_line(value v) {
+  LLVMValueRef Val = Value_val(v);
+  unsigned L = 0;
+  if (LLVMIsAInstruction(Val)) {
+    LLVMMetadataRef Loc = LLVMInstructionGetDebugLoc(Val);
+    if (Loc) {
+      L = LLVMDILocationGetLine(Loc);
+    }
+  } else if (LLVMIsAGlobalVariable(Val)) {
+    LLVMMetadataRef Var = global_variable_get_divariable(Val);
+    if (Var) {
+      L = LLVMDIVariableGetLine(Var);
+    }
+  } else if (LLVMIsAFunction(Val)) {
+    LLVMMetadataRef Subprogram = LLVMGetSubprogram(Val);
+    if (Subprogram) {
+      L = LLVMDISubprogramGetLine(Subprogram);
+    }
+  }
+  return Val_int(L);
+}
+
+/* llvalue -> int */
+CAMLprim value llvm_get_debug_loc_column(value v) {
+  LLVMValueRef Val = Value_val(v);
+  unsigned C = 0;
+  if (LLVMIsAInstruction(Val)) {
+    LLVMMetadataRef Loc = LLVMInstructionGetDebugLoc(Val);
+    if (Loc) {
+      C = LLVMDILocationGetColumn(Loc);
+    }
+  }
+  return Val_int(C);
+}
+
 /*--... Operations on scalar constants .....................................--*/
 
 /* lltype -> int -> llvalue */
